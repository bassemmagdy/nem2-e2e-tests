---
# This playbook is supposed to:
# 1. Start new pumba container to limit network rate the peer node with an interval of x minutes
# 2. If possible, set timeout for the pumba container also for x hours

- hosts: all:!spammer*
  remote_user: ubuntu
  tasks:
    - name: install python-pip
      apt:
        state: latest
        name: python3-pip
      become: yes
    - name: install docker python library required by ansible
      pip:
        name:
        - docker
    # - name: "List all known variables and facts"
    #   debug:
    #     var: hostvars[inventory_hostname]
    # - name: Get info on docker host and list images
    #   docker_host_info:
    #     images: yes
    #     containers: yes
    #   register: docker_info
    # - name: print containers info
    #   debug:
    #     msg: "IMAGE: {{ item.Image }}, NAMES: {{ item.Names }}"
    #   loop: "{{ docker_info.containers }}"
    - name: identify any running pumba containers
      shell: docker ps -aq --filter ancestor=gaiaadm/pumba
      register: pumba_conts
    - name: remove any running pumba containers
      shell: docker ps -aq --filter ancestor=gaiaadm/pumba | xargs docker rm -f
      when: pumba_conts.stdout != ""
      changed_when: pumba_conts.stdout != ""
    # - name: Get info on docker host and list images
    #   docker_host_info:
    #     images: yes
    #     containers: yes
    #   register: docker_info
    # - name: print containers info
    #   debug:
    #     msg: "IMAGE: {{ item.Image }}, NAMES: {{ item.Names }}"
    #   loop: "{{ docker_info.containers }}"
    - name: start pumba
      docker_container:
        name: pumba_1
        state: started
        image: gaiaadm/pumba
        detach: yes
        log_driver: json-file
        output_logs: yes
        command: --log-level=debug netem --tc-image=gaiadocker/iproute2 {{ netem_command }} {{ target_containers }}
        volumes:
        - /var/run/docker.sock:/var/run/docker.sock:rw
        restart_policy: always
    