---
# this playbook is supposed to:
# 1. copy monitor-containers script onto all peer nodes into ~/symbol-testnet/utilities/bin/bash/monitor-containers.sh
# 2. Make it executable
# 3. (rename nohup.out if it exists) 
# 4. Start it in the background for x+1 hours
# 5. stop any currently running pumba containers
# 6. start new pumba container to kill the peer node with an interval of x minutes
# 7. If possible, set timeout for the pumba container also for x hours

- hosts: peer*,beacon*
  remote_user: ubuntu
  tasks:
    - name: install python-pip
      apt:
        state: latest
        name: python3-pip
    become: yes
    - name: install docker python library required by ansible
      pip:
        name:
        - docker
    - name: copy container monitoring script
      copy:
        src: ./scripts/monitor-containers.sh
        dest: ~/symbol-testnet/utilities/bin/bash/monitor-containers.sh
        force: yes
        owner: ubuntu
        mode: '0754'
    - name: start the container monitoring script
      shell: |
        cd ~/symbol-testnet/utilities/bin/bash/
        if [[ -f "nohup.out" ]]; then
          mv nohup.out nohup_old.out
        fi
        nohup ./monitor-containers.sh "{{ DURATION_WITH_UNITS }}" "{{ MONITOR_SLEEP_INTERVAL_SECONDS }}" "{{ CONTAINERS_TO_KILL }}" "{{ EXTRA_ARGS }}" &
    - name: stop any running pumba containers
      shell: >
        docker ps --filter ancestor=gaiaadm/pumba | grep -q gaiaadm/pumba
        && echo -n "EXISTS" 
        && docker ps -q --filter ancestor=gaiaadm/pumba | xargs docker stop
      register: pumba_cont_exists
      changed_when: pumba_cont_exists.stdout != 'EXISTS'
    - name: start pumba
      docker_container:
        name: pumba_1
        state: started
        image: gaiaadm/pumba
        detach: yes
        log_driver: json-file
        output_logs: yes
        command: --log-level=debug --interval={{ PUMBA_INTERVAL }} --json kill --signal=SIGKILL {{ CONTAINERS_TO_KILL }}
        volumes:
        - /var/run/docker.sock:/var/run/docker.sock:rw
    